services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: winfit-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: winfit
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    secrets:
      - postgres_password
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./setup-db.sql:/docker-entrypoint-initdb.d/setup-db.sql:ro
    networks:
      - winfit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d winfit"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: winfit-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - winfit-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # NestJS API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: winfit-api-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      APP_PORT: 3000
      APP_URL: ${APP_URL}
      
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: winfit
      DATABASE_USER: postgres
      DATABASE_PASSWORD_FILE: /run/secrets/postgres_password
      DATABASE_SSL: false
      DATABASE_CONNECTION_LIMIT: 20
      DATABASE_CONNECTION_TIMEOUT: 60000
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_TTL: 300
      REDIS_DB: 0
      
      # JWT
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_SECRET_FILE: /run/secrets/jwt_refresh_secret
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Production specific
      SWAGGER_ENABLED: false
      AUTO_SEED_ACHIEVEMENTS: false
      DEBUG_MODE: false
      VERBOSE_LOGGING: false
      LOG_LEVEL: warn
      
      # Security
      CORS_ORIGIN: ${CORS_ORIGIN}
      HELMET_ENABLED: true
      CSP_ENABLED: true
      COMPRESSION_ENABLED: true
      COOKIE_SECURE: true
      COOKIE_HTTP_ONLY: true
      COOKIE_SAME_SITE: strict
      
      # Rate limiting
      RATE_LIMIT_GLOBAL: 100
      RATE_LIMIT_AUTH: 5
      RATE_LIMIT_UPLOADS: 10
      
      # Email
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM_NAME: ${EMAIL_FROM_NAME}
      EMAIL_FROM_ADDRESS: ${EMAIL_FROM_ADDRESS}
      
      # AWS S3
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_CLOUDFRONT_DOMAIN: ${AWS_CLOUDFRONT_DOMAIN}
      
      # FCM
      FCM_SERVICE_ACCOUNT: ${FCM_SERVICE_ACCOUNT}
      
      # Health & Monitoring
      HEALTH_CHECK_ENABLED: true
      METRICS_ENABLED: true
      
    secrets:
      - postgres_password
      - jwt_secret
      - jwt_refresh_secret
    networks:
      - winfit-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: winfit-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - winfit-network
    depends_on:
      - api
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  jwt_refresh_secret:
    file: ./secrets/jwt_refresh_secret.txt

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  winfit-network:
    driver: bridge 